// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: domin-segment/proto/storage.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StorageBoxService_HealthCheck_FullMethodName  = "/storage.StorageBoxService/HealthCheck"
	StorageBoxService_StoreSegment_FullMethodName = "/storage.StorageBoxService/StoreSegment"
)

// StorageBoxServiceClient is the client API for StorageBoxService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorageBoxServiceClient interface {
	HealthCheck(ctx context.Context, in *HelloWroldMessage, opts ...grpc.CallOption) (*HelloWroldResponse, error)
	StoreSegment(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SegmentMessage, SegmentResponse], error)
}

type storageBoxServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageBoxServiceClient(cc grpc.ClientConnInterface) StorageBoxServiceClient {
	return &storageBoxServiceClient{cc}
}

func (c *storageBoxServiceClient) HealthCheck(ctx context.Context, in *HelloWroldMessage, opts ...grpc.CallOption) (*HelloWroldResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HelloWroldResponse)
	err := c.cc.Invoke(ctx, StorageBoxService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageBoxServiceClient) StoreSegment(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SegmentMessage, SegmentResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StorageBoxService_ServiceDesc.Streams[0], StorageBoxService_StoreSegment_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SegmentMessage, SegmentResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StorageBoxService_StoreSegmentClient = grpc.ClientStreamingClient[SegmentMessage, SegmentResponse]

// StorageBoxServiceServer is the server API for StorageBoxService service.
// All implementations must embed UnimplementedStorageBoxServiceServer
// for forward compatibility.
type StorageBoxServiceServer interface {
	HealthCheck(context.Context, *HelloWroldMessage) (*HelloWroldResponse, error)
	StoreSegment(grpc.ClientStreamingServer[SegmentMessage, SegmentResponse]) error
	mustEmbedUnimplementedStorageBoxServiceServer()
}

// UnimplementedStorageBoxServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStorageBoxServiceServer struct{}

func (UnimplementedStorageBoxServiceServer) HealthCheck(context.Context, *HelloWroldMessage) (*HelloWroldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedStorageBoxServiceServer) StoreSegment(grpc.ClientStreamingServer[SegmentMessage, SegmentResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StoreSegment not implemented")
}
func (UnimplementedStorageBoxServiceServer) mustEmbedUnimplementedStorageBoxServiceServer() {}
func (UnimplementedStorageBoxServiceServer) testEmbeddedByValue()                           {}

// UnsafeStorageBoxServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageBoxServiceServer will
// result in compilation errors.
type UnsafeStorageBoxServiceServer interface {
	mustEmbedUnimplementedStorageBoxServiceServer()
}

func RegisterStorageBoxServiceServer(s grpc.ServiceRegistrar, srv StorageBoxServiceServer) {
	// If the following call pancis, it indicates UnimplementedStorageBoxServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StorageBoxService_ServiceDesc, srv)
}

func _StorageBoxService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloWroldMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageBoxServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageBoxService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageBoxServiceServer).HealthCheck(ctx, req.(*HelloWroldMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageBoxService_StoreSegment_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StorageBoxServiceServer).StoreSegment(&grpc.GenericServerStream[SegmentMessage, SegmentResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StorageBoxService_StoreSegmentServer = grpc.ClientStreamingServer[SegmentMessage, SegmentResponse]

// StorageBoxService_ServiceDesc is the grpc.ServiceDesc for StorageBoxService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StorageBoxService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "storage.StorageBoxService",
	HandlerType: (*StorageBoxServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _StorageBoxService_HealthCheck_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StoreSegment",
			Handler:       _StorageBoxService_StoreSegment_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "domin-segment/proto/storage.proto",
}
