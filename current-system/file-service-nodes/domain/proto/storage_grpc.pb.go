// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: file-service-nodes/domain/proto/storage.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StorageBox_HealthCheck_FullMethodName = "/storage.storageBox/HealthCheck"
	StorageBox_IngressNode_FullMethodName = "/storage.storageBox/IngressNode"
)

// StorageBoxClient is the client API for StorageBox service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorageBoxClient interface {
	HealthCheck(ctx context.Context, in *HealthCheckMessage, opts ...grpc.CallOption) (*HelloReply, error)
	IngressNode(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[IngressStorageMessage, IngressStorageResponse], error)
}

type storageBoxClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageBoxClient(cc grpc.ClientConnInterface) StorageBoxClient {
	return &storageBoxClient{cc}
}

func (c *storageBoxClient) HealthCheck(ctx context.Context, in *HealthCheckMessage, opts ...grpc.CallOption) (*HelloReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, StorageBox_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageBoxClient) IngressNode(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[IngressStorageMessage, IngressStorageResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StorageBox_ServiceDesc.Streams[0], StorageBox_IngressNode_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[IngressStorageMessage, IngressStorageResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StorageBox_IngressNodeClient = grpc.ClientStreamingClient[IngressStorageMessage, IngressStorageResponse]

// StorageBoxServer is the server API for StorageBox service.
// All implementations must embed UnimplementedStorageBoxServer
// for forward compatibility.
type StorageBoxServer interface {
	HealthCheck(context.Context, *HealthCheckMessage) (*HelloReply, error)
	IngressNode(grpc.ClientStreamingServer[IngressStorageMessage, IngressStorageResponse]) error
	mustEmbedUnimplementedStorageBoxServer()
}

// UnimplementedStorageBoxServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStorageBoxServer struct{}

func (UnimplementedStorageBoxServer) HealthCheck(context.Context, *HealthCheckMessage) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedStorageBoxServer) IngressNode(grpc.ClientStreamingServer[IngressStorageMessage, IngressStorageResponse]) error {
	return status.Errorf(codes.Unimplemented, "method IngressNode not implemented")
}
func (UnimplementedStorageBoxServer) mustEmbedUnimplementedStorageBoxServer() {}
func (UnimplementedStorageBoxServer) testEmbeddedByValue()                    {}

// UnsafeStorageBoxServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageBoxServer will
// result in compilation errors.
type UnsafeStorageBoxServer interface {
	mustEmbedUnimplementedStorageBoxServer()
}

func RegisterStorageBoxServer(s grpc.ServiceRegistrar, srv StorageBoxServer) {
	// If the following call pancis, it indicates UnimplementedStorageBoxServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StorageBox_ServiceDesc, srv)
}

func _StorageBox_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageBoxServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageBox_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageBoxServer).HealthCheck(ctx, req.(*HealthCheckMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageBox_IngressNode_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StorageBoxServer).IngressNode(&grpc.GenericServerStream[IngressStorageMessage, IngressStorageResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StorageBox_IngressNodeServer = grpc.ClientStreamingServer[IngressStorageMessage, IngressStorageResponse]

// StorageBox_ServiceDesc is the grpc.ServiceDesc for StorageBox service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StorageBox_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "storage.storageBox",
	HandlerType: (*StorageBoxServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _StorageBox_HealthCheck_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "IngressNode",
			Handler:       _StorageBox_IngressNode_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "file-service-nodes/domain/proto/storage.proto",
}
